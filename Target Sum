class Solution {
    
    public int findTargetSumWays(int[] nums, int target) {
        int sum=0;
        int n=nums.length;
        for(int i=0;i<nums.length;i++){
            sum += nums[i];
        }
        if(sum < target) return 0;
        if((sum+target)<0 || ((sum+target) % 2) != 0) return 0;
        int t = (target + sum)/2;
        return countsubsetswithgivenSum(nums,n,t);
    }
    public int countsubsetswithgivenSum(int[] nums,int n, int target){

        int[][]dp = new int[n+1][target + 1];
        dp[0][0] = 1;
        for(int i=1;i<=n;i++){
            dp[i][0]=1;
        }
        for(int i=1;i<=target;i++){
           dp[0][i]=0;
        }
        for(int i=1;i<=n;i++){
           for(int j=0;j<=target;j++){
            if(nums[i-1]<=j){
                dp[i][j]=dp[i-1][j] + dp[i-1][j-nums[i-1]];
            }else{
                 dp[i][j]=dp[i-1][j];
            }
           }
        }
        return dp[n][target];
    }
}
