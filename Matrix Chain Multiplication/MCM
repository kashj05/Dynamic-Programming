// Java code to implement the
// matrix chain multiplication using memoization
import java.util.Arrays;

class GfG {

    // Function to compute minimum multiplication
    // recursively
    static int minMultRec(int[] arr, int i, int j,
                          int[][] memo)
    {

        // If there is only one matrix
        if (i + 1 == j)
            return 0;

        // Check if the result is already computed
        if (memo[i][j] != -1)
            return memo[i][j];

        int res = Integer.MAX_VALUE;

        // Place the first bracket at different positions or
        // k and for every placed first bracket, recursively
        // compute minimum cost for remaining brackets (or
        // subproblems)
        for (int k = i + 1; k < j; k++) {
            int curr = minMultRec(arr, i, k, memo)
                       + minMultRec(arr, k, j, memo)
                       + arr[i] * arr[k] * arr[j];

            res = Math.min(curr, res);
        }

        // Store the result in memo table
        memo[i][j] = res;
        return res;
    }

    static int matrixMultiplication(int[] arr)
    {

        int n = arr.length;
        int[][] memo = new int[n][n];
        for (int[] row : memo)
            Arrays.fill(row, -1);

        return minMultRec(arr, 0, n - 1, memo);
    }

    public static void main(String[] args)
    {

        int[] arr = { 2, 1, 3, 4 };
        System.out.println(matrixMultiplication(arr));
    }
}
