class Solution {
    public int maxSumAfterPartitioning(int[] arr, int k) {
        int n = arr.length;
        int[] dp = new int[n];
        Arrays.fill(dp, -1);

        return helper(0, arr, k, dp);
    }

    private int helper(int ind, int[] num, int k, int[] dp) {
        int n = num.length;
        if(ind == n) return 0;
        if(dp[ind] != -1) {
            return dp[ind];
        }

        int len = 0;
        int maxi = Integer.MIN_VALUE;
        int maxAns = Integer.MIN_VALUE;

        for(int j=ind; j<Math.min(ind+k, n); j++) {
            len++;
            maxi = Math.max(maxi, num[j]);
            int sum = len * maxi + helper(j+1, num, k, dp);
            maxAns = Math.max(maxAns, sum);
        }
        return dp[ind]=maxAns;
    }
}
